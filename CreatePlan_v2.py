# -*- coding: utf-8 -*-
"""
Created on Tue Nov  5 16:07:08 2019

@author: eaglinr

How to Use:
    
    The functions will read a spreadsheet generated by the PeopleSoft
    
    The spreadsheet by default is called Query.xlsx and contains the 
    program
    classes
    student info
    grades
    
    for each student and class in our programs.
    
    It then compares it against the planning spreadsheets which are
    
    BSET.xlsx
    BSIT.xlsx
    BSEET.xlsx
    
    and fills in all the blanks putting the semester taken in the 
    spreadhseet and blacking out the rest of the row for each
    required class. All classes are listed in column 3 of the advising
    sheets.
    
    The spreadsheets should contain a worksheet called Planner and another 
    called Completed. These are the 2 sheets that have data put into them

"""

#==================================================================================================================================================================================
# Authors: Dr. Eaglin, Andrew Polemeni
# Organization: Daytona State College
# Date Written: October 24, 2019
# Program Purpose: To automate course check downs for student progress.
#==================================================================================================================================================================================
# Import statements
import sys, os.path
import pandas as pd
import openpyxl
import numpy as np
from openpyxl.styles import PatternFill
from openpyxl.styles.colors import YELLOW, BLACK, BLUE, GREEN
#import main
#==================================================================================================================================================================================
# NEED HELP GETTING VARIABLE FROM PYQT5

#==================================================================================================================================================================================
# Create Path Variables and Check if they exist

mainPath = 'ATC_STUDENT_CHECKDOWNS/' # Create path for BSIT

bsitPath = 'ATC_STUDENT_CHECKDOWNS/BSIT/'
if not os.path.exists('ATC_STUDENT_CHECKDOWNS/BSIT/'):
    os.makedirs(bsitPath)
else:
    print('This directory already exist' + ' ' + bsitPath)


bsetPath = 'ATC_STUDENT_CHECKDOWNS/BSET/' # Create path for BSET
if not os.path.exists('ATC_STUDENT_CHECKDOWNS/BSET/'):
    os.makedirs(bsetPath)
else:
    print('This directory already exist'+ ' ' + bsetPath)


bseetPath = 'ATC_STUDENT_CHECKDOWNS/BSEET/' # Create path for BSEET
if not os.path.exists('ATC_STUDENT_CHECKDOWNS/BSEET/'):
    os.makedirs(bseetPath)
else:
    print('This directory already exist' + ' ' + bseetPath)
#==================================================================================================================================================================================


#Grab the first excel file which will be the Query Report
# Removes all columns and values that should not be used
#Get the Query

def GetStudentData(query_filename):
    # Answers a DataFrame
    # query = file name of excel spreadsheet containing query info
    # sid is student id
    
    df1 = pd.read_excel(query_filename, sheet_name='sheet1', usecols="A, B, C, D, E, F, G, H, M, N") #df = dataframe variable and import file here
    df1["Grade"] = df1["Grade"].fillna(value="IP")
    #df1.Grade.replace(np.NaN, "IP", inplace=True)
    df1.dropna(inplace=True) #drop cells with NaN
    #df1.drop(df1.index[0]) # DROP the first row because of how the report generates from query
    df1.drop(df1.loc[df1['Grade']=='F'].index, inplace=True) # Delete grades that are equal to F
    df1.drop(df1.loc[df1['Grade']=='FN'].index, inplace=True) # Delete grades that are equal to FN
    df1.drop(df1.loc[df1['Grade']=='W'].index, inplace=True) # Delete grades that are equal to W
    df1.drop(df1.loc[df1['Grade']=='D'].index, inplace=True) # Delete grades that are equal to D
    df1.drop(df1.loc[df1['Grade']=='I'].index, inplace=True) # Delete grades that are equal to I
    return df1

def FilterForStudent(df1, sid):
    #Drop rows not needed or used
    # Answers a DataFrame
    # sid is student id
    # Creates a new copy of
    df2 = df1.copy(deep = True)
    df2.drop(df2.loc[df1["ID"] != int(sid)].index, inplace=True)

    return df2   

#==========================================================================================================================
# File to be pasted into - this is a blank workbook
def CreateStudentFile(df):

    file = "BSET"
    if df['Acad Plan'].iloc[0] == 633400:

        file = "BSIT"

    if df['Acad Plan'].iloc[0] == 633300: # Find the dataframe by string and equal to program number

        file = "BSEET"

    wb2 = openpyxl.load_workbook(file + ".xlsx")
    ws2 = wb2.get_sheet_by_name("Planner")
    wsc = wb2.get_sheet_by_name("Completed")
    
    j = df.first_valid_index()

    # We now simply go through each column of the BSET Checkdown
    # and compare against courses taken
    ws2.cell(row=3, column=3).value = str(df.loc[j]["First Name"]) + " " + str(df.loc[j]["Last"])
    ws2.cell(row=4, column=3).value = str(df.loc[j]["ID"])

 

# We now simply go through each column of the BSET Checkdown
# and compare against courses taken
    for i in range(6, 70):
        # Define course variable
        course = str(ws2.cell(row=i, column=3).value)[0:7]
        j = 1
        for row in df.iterrows():
            # Define taken and name variable
            taken = str(row[1]['Subject'] + str(row[1]['Catalog']))[0:7]
            name = row[1]['First Name'] + "_" + str(row[1]['Last'])
            #IP = df.loc[df['Grade'] == "IP"]

            if course == taken:
                print(name, course, taken)
                ws2.cell(row=i, column=4).value = str(row[1]['Term'])
                if row[1]['Grade'] == 'IP':    # course is in Progress
                    ws2.cell(row=i, column=4).value = 'IP'
                    ws2.cell(row=i, column=4).fill = PatternFill(fgColor=GREEN, fill_type = "solid") #IF TAKEN CHECK OFF WITH YELLOW
                else:                           # course is taken
                    ws2.cell(row=i, column=4).fill = PatternFill(fgColor=YELLOW, fill_type = "solid") #IF TAKEN CHECK OFF WITH YELLOW
                
                    ws2.cell(row=i, column=5).fill = PatternFill(fgColor=BLACK, fill_type="solid") # Fill in semesters with black
                    ws2.cell(row=i, column=6).fill = PatternFill(fgColor=BLACK, fill_type="solid")
                    ws2.cell(row=i, column=7).fill = PatternFill(fgColor=BLACK, fill_type="solid")
                    ws2.cell(row=i, column=8).fill = PatternFill(fgColor=BLACK, fill_type="solid")
                    ws2.cell(row=i, column=9).fill = PatternFill(fgColor=BLACK, fill_type="solid")
                    ws2.cell(row=i, column=10).fill = PatternFill(fgColor=BLACK, fill_type="solid")
            else:   # Course is not in Advising Spreadsheet
                wsc.cell(row=j, column=1).value = str(row[1]['Subject']) + str(row[1]['Catalog'])
                wsc.cell(row=j, column=2).value = str(row[1]['Descr']) 
                j = j + 1
                        
    #Once the sheet is filled out
    file_to_save = file + "_" + name + '.xlsx'
    wb2.save(file_to_save)
    return file_to_save
#==========================================================================================================================


# This will generate a spreadsheet for everyone by calling the functions.
def GenerateAllSpreadsheets():
    # Use of the functions
# Get the ID of student for report
    df1 = GetStudentData("Query.xlsx") #CREATE A VARIABLE FOR THE QUERY SHEET
    ids = df1['ID'].unique().tolist() # Creates a list of the ids
    for sid in ids: # Iterate through all student ids in the ids list
        df2 = FilterForStudent(df1, sid)  
        file = CreateStudentFile(df2)
        print("Student Information save to " + file)



def GenerateSpreadsheetForMajor(major):
    # Use of the functions
# Get the ID of student for report
    df1 = GetStudentData("Query.xlsx") #CREATE A VARIABLE FOR THE QUERY SHEET
    ids = df1['ID'].unique().tolist() # Creates a list of the ids
    for sid in ids: # Iterate through all student ids in the ids list
        df2 = FilterForStudent(df1, sid)
        if df2['Acad Plan'].iloc[0] == major:
            file = CreateStudentFile(df2)
            print("Student Information save to " + file)



#This generates a single spreadsheet - but must be passed the 
# data and the ID of the siudent in question
def GenerateSingleSpreadsheet(df, sid):
    df2 = FilterForStudent(df, sid)  
    file = CreateStudentFile(df2)
    print("Student Information save to " + file)


#file = CreateStudentFile(df2)
#print(df2['Acad Plan'].iloc[0])
#file = CreateStudentFile(df2)


# Execute this to do all the spreadsheets
GenerateAllSpreadsheets()


#Execute to do single spreadsheet
# use from ID list or pass ID as an integer
df1 = GetStudentData("Query.xlsx") #CREATE A VARIABLE FOR THE QUERY SHEET
ids = df1['ID'].unique().tolist() # Creates a list of the ids
GenerateSingleSpreadsheet(df1, 873937)
GenerateSingleSpreadsheet(df1, 766444)
GenerateSingleSpreadsheet(df1, 894530)

#
GenerateSpreadsheetForMajor(633300)
